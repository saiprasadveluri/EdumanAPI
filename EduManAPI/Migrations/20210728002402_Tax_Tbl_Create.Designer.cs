// <auto-generated />
using System;
using EduManAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EduManAPI.Migrations
{
    [DbContext(typeof(EduManDBContext))]
    [Migration("20210728002402_Tax_Tbl_Create")]
    partial class Tax_Tbl_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EduManAPI.AcdYear", b =>
                {
                    b.Property<Guid>("AcdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcdText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcdId");

                    b.ToTable("AcdYears");
                });

            modelBuilder.Entity("EduManAPI.AppLinkDistribution", b =>
                {
                    b.Property<Guid>("ALID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StuMapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ALID");

                    b.HasIndex("StuMapId");

                    b.ToTable("AppLinkDistributions");
                });

            modelBuilder.Entity("EduManAPI.Assignment", b =>
                {
                    b.Property<Guid>("AssnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssnDate")
                        .HasColumnType("date");

                    b.Property<string>("AssnFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssnId");

                    b.HasIndex("MapId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("EduManAPI.AssignmentSubmission", b =>
                {
                    b.Property<Guid>("AssnSubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssnSubPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StuMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubDate")
                        .HasColumnType("date");

                    b.HasKey("AssnSubId");

                    b.HasIndex("AssnId");

                    b.HasIndex("StuMapId");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("EduManAPI.BankDeatail", b =>
                {
                    b.Property<Guid>("BID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CashierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WalletName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BID");

                    b.HasIndex("OrgId");

                    b.ToTable("BankDeatails");
                });

            modelBuilder.Entity("EduManAPI.Cashier", b =>
                {
                    b.Property<Guid>("CashierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOJoining")
                        .HasColumnType("date");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LoginUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CashierId");

                    b.HasIndex("LoginUID");

                    b.HasIndex("OrgId", "EmpId")
                        .IsUnique();

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("EduManAPI.Chalan", b =>
                {
                    b.Property<Guid>("ChlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChlDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChlnNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SNo")
                        .HasColumnType("int");

                    b.HasKey("ChlId");

                    b.HasIndex("ChlnNumber")
                        .IsUnique();

                    b.HasIndex("MapId");

                    b.ToTable("Chalans");
                });

            modelBuilder.Entity("EduManAPI.ChalanLineInfo", b =>
                {
                    b.Property<Guid>("ChlLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DueMon")
                        .HasColumnType("int");

                    b.Property<string>("FeeHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PaidAmt")
                        .HasColumnType("float");

                    b.Property<int>("TermNo")
                        .HasColumnType("int");

                    b.Property<double>("TotAmt")
                        .HasColumnType("float");

                    b.HasKey("ChlLineId");

                    b.HasIndex("ChlId");

                    b.HasIndex("FeeId");

                    b.ToTable("ChalanLineInfos");
                });

            modelBuilder.Entity("EduManAPI.ChapterwiseExam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamId");

                    b.ToTable("ChatpterwiseExams");
                });

            modelBuilder.Entity("EduManAPI.ChapterwiseExamChapter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChapId");

                    b.HasIndex("ExamId");

                    b.ToTable("ChapterwiseExamChapters");
                });

            modelBuilder.Entity("EduManAPI.CoCurricularMark", b =>
                {
                    b.Property<Guid>("CCID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ComputerEducation")
                        .HasColumnType("float");

                    b.Property<double>("CulturalEducation")
                        .HasColumnType("float");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OtherAreas")
                        .HasColumnType("float");

                    b.Property<double>("PhysicalEducation")
                        .HasColumnType("float");

                    b.Property<Guid>("StuMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ValueEducation")
                        .HasColumnType("float");

                    b.HasKey("CCID");

                    b.HasIndex("ExamId");

                    b.HasIndex("StuMapId");

                    b.ToTable("CoCurricularMarks");
                });

            modelBuilder.Entity("EduManAPI.DigitalContent", b =>
                {
                    b.Property<Guid>("DCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DCType")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DCId");

                    b.HasIndex("ChapId");

                    b.ToTable("DigitalContents");
                });

            modelBuilder.Entity("EduManAPI.Enquiry", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnqDate")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Enquiries");
                });

            modelBuilder.Entity("EduManAPI.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamId");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("EduManAPI.ExamProgressReport", b =>
                {
                    b.Property<Guid>("PRId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Marks")
                        .HasColumnType("float");

                    b.Property<Guid>("PRHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StuMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubwiseRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PRId");

                    b.HasIndex("PRHeadId");

                    b.HasIndex("SchId");

                    b.HasIndex("StuMapId");

                    b.ToTable("ExamProgressReports");
                });

            modelBuilder.Entity("EduManAPI.ExamProgressReportHead", b =>
                {
                    b.Property<Guid>("PRHId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxMarks")
                        .HasColumnType("float");

                    b.Property<double>("MinMarks")
                        .HasColumnType("float");

                    b.HasKey("PRHId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamProgressReportHeads");
                });

            modelBuilder.Entity("EduManAPI.ExamSchedule", b =>
                {
                    b.Property<Guid>("ExamSchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("ExamSchId");

                    b.HasIndex("ExamId");

                    b.HasIndex("MapId");

                    b.ToTable("ExamSchedules");
                });

            modelBuilder.Entity("EduManAPI.ExamType", b =>
                {
                    b.Property<Guid>("ExamTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamTypeId");

                    b.HasIndex("OrgId");

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("EduManAPI.ExpenseHead", b =>
                {
                    b.Property<Guid>("EHID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EHID");

                    b.HasIndex("OrgId");

                    b.ToTable("ExpenseHeads");
                });

            modelBuilder.Entity("EduManAPI.FeeCollection", b =>
                {
                    b.Property<Guid>("FeeColId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChlnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ColDate")
                        .HasColumnType("date");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayType")
                        .HasColumnType("int");

                    b.HasKey("FeeColId");

                    b.HasIndex("ChlnId")
                        .IsUnique();

                    b.HasIndex("MapId");

                    b.ToTable("FeeCollections");
                });

            modelBuilder.Entity("EduManAPI.FeeCollectionLineItem", b =>
                {
                    b.Property<Guid>("LineItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ColId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LineItemId");

                    b.HasIndex("ColId");

                    b.HasIndex("FeeId");

                    b.ToTable("FeeCollectionLineItems");
                });

            modelBuilder.Entity("EduManAPI.FeeConcession", b =>
                {
                    b.Property<Guid>("ConId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ConcessionType")
                        .HasColumnType("int");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConId");

                    b.HasIndex("MapId");

                    b.HasIndex("FeeId", "MapId")
                        .IsUnique();

                    b.ToTable("FeeConcessions");
                });

            modelBuilder.Entity("EduManAPI.FeeHeadMaster", b =>
                {
                    b.Property<Guid>("FeeHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeeHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeeType")
                        .HasColumnType("int");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Terms")
                        .HasColumnType("int");

                    b.HasKey("FeeHeadId");

                    b.HasIndex("OrgId");

                    b.ToTable("FeeHeadMasters");
                });

            modelBuilder.Entity("EduManAPI.FeeMaster", b =>
                {
                    b.Property<Guid>("FeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcdyearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("DueDayNo")
                        .HasColumnType("int");

                    b.Property<int>("DueMonthNo")
                        .HasColumnType("int");

                    b.Property<Guid>("FHeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TermNo")
                        .HasColumnType("int");

                    b.HasKey("FeeId");

                    b.HasIndex("AcdyearId");

                    b.HasIndex("MapId");

                    b.HasIndex("StnId");

                    b.ToTable("FeeMasters");
                });

            modelBuilder.Entity("EduManAPI.GradeRange", b =>
                {
                    b.Property<Guid>("GRID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("GradePoint")
                        .HasColumnType("float");

                    b.Property<string>("GradeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxMarks")
                        .HasColumnType("float");

                    b.Property<double>("MinMarks")
                        .HasColumnType("float");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GRID");

                    b.HasIndex("OrgId");

                    b.ToTable("GradeRanges");
                });

            modelBuilder.Entity("EduManAPI.HomeWork", b =>
                {
                    b.Property<Guid>("HWId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassWorkString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HWDate")
                        .HasColumnType("date");

                    b.Property<string>("HomeWorkString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HWId");

                    b.HasIndex("MapId");

                    b.ToTable("HomeWorks");
                });

            modelBuilder.Entity("EduManAPI.HomeWorkSubmission", b =>
                {
                    b.Property<Guid>("HWSubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HWId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HWSubPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StuMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubDate")
                        .HasColumnType("date");

                    b.HasKey("HWSubId");

                    b.HasIndex("HWId");

                    b.HasIndex("StuMapId");

                    b.ToTable("HomeWorkSubmissions");
                });

            modelBuilder.Entity("EduManAPI.Notification", b =>
                {
                    b.Property<Guid>("NID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("From")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EduManAPI.NotificationRecp", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RecpType")
                        .HasColumnType("int");

                    b.HasKey("RID");

                    b.HasIndex("NID");

                    b.ToTable("NotificationRecps");
                });

            modelBuilder.Entity("EduManAPI.OnLineSessionInfo", b =>
                {
                    b.Property<Guid>("OSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("IsReapated")
                        .HasColumnType("int");

                    b.Property<Guid>("OSessionUrlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepeatString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SubMapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OSId");

                    b.HasIndex("OSessionUrlId");

                    b.HasIndex("SubMapId");

                    b.ToTable("OnLineSessionInfos");
                });

            modelBuilder.Entity("EduManAPI.OnlineSessionAttendee", b =>
                {
                    b.Property<Guid>("AtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EvtDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OSId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AtId");

                    b.HasIndex("MapId");

                    b.HasIndex("OSId");

                    b.ToTable("OnlineSessionAttendees");
                });

            modelBuilder.Entity("EduManAPI.OnlineSessionUrl", b =>
                {
                    b.Property<Guid>("OSUrlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OSUrlId");

                    b.HasIndex("TeacherId");

                    b.ToTable("OnlineSessionUrls");
                });

            modelBuilder.Entity("EduManAPI.Organization", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrgAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgPOC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrgId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EduManAPI.PayRoll", b =>
                {
                    b.Property<Guid>("PRID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OrgAmount")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PRID");

                    b.HasIndex("HID", "EmpID")
                        .IsUnique();

                    b.ToTable("PayRolls");
                });

            modelBuilder.Entity("EduManAPI.Payhead", b =>
                {
                    b.Property<Guid>("PHID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PHID");

                    b.HasIndex("OrgId", "Name")
                        .IsUnique();

                    b.ToTable("Payheads");
                });

            modelBuilder.Entity("EduManAPI.RoleMaster", b =>
                {
                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleVal")
                        .HasColumnType("int");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EduManAPI.Salary", b =>
                {
                    b.Property<Guid>("SALID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MonthNo")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SALID");

                    b.HasIndex("EmpId", "MonthNo", "Year")
                        .IsUnique();

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("EduManAPI.SalaryDetail", b =>
                {
                    b.Property<Guid>("SALDetID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("HeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeadType")
                        .HasColumnType("int");

                    b.Property<Guid>("SalID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SALDetID");

                    b.HasIndex("SalID");

                    b.ToTable("SalaryDetails");
                });

            modelBuilder.Entity("EduManAPI.SchoolSetting", b =>
                {
                    b.Property<Guid>("SSID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerLogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurAcdYear")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrintLogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SSID");

                    b.HasIndex("CurAcdYear");

                    b.HasIndex("OrgId");

                    b.ToTable("SchoolSettings");
                });

            modelBuilder.Entity("EduManAPI.Standard", b =>
                {
                    b.Property<Guid>("StdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StdId");

                    b.HasIndex("OrgId", "StdName")
                        .IsUnique();

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("EduManAPI.StdSubMap", b =>
                {
                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MapId");

                    b.HasIndex("SubId");

                    b.HasIndex("StdId", "SubId")
                        .IsUnique()
                        .HasFilter("[StdId] IS NOT NULL AND [SubId] IS NOT NULL");

                    b.ToTable("StdSubMaps");
                });

            modelBuilder.Entity("EduManAPI.StuStdAcdYearMap", b =>
                {
                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecDate")
                        .HasColumnType("date");

                    b.Property<int>("RecType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("StnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MapId");

                    b.HasIndex("StnId");

                    b.HasIndex("StuId");

                    b.HasIndex("AcYearId", "StnId", "StuId")
                        .IsUnique();

                    b.ToTable("StuStdAcdYearMaps");
                });

            modelBuilder.Entity("EduManAPI.StudentInfo", b =>
                {
                    b.Property<Guid>("StuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AadharNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOAdmission")
                        .HasColumnType("date");

                    b.Property<DateTime>("DOBirth")
                        .HasColumnType("date");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LoginUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegdNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolAdmNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StuFatherImageFile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StuImageFile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StuMotherImageFile")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StuId");

                    b.HasIndex("LoginUID");

                    b.ToTable("StudentInfos");
                });

            modelBuilder.Entity("EduManAPI.SubChapeter", b =>
                {
                    b.Property<Guid>("ChapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChapName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChapId");

                    b.HasIndex("MapId", "ChapName")
                        .IsUnique();

                    b.ToTable("SubChapeters");
                });

            modelBuilder.Entity("EduManAPI.Subject", b =>
                {
                    b.Property<Guid>("SubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubId");

                    b.HasIndex("OrgId", "SubjectName")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EduManAPI.Tax", b =>
                {
                    b.Property<Guid>("TID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TID");

                    b.HasIndex("OrgId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("EduManAPI.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BllodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOJoining")
                        .HasColumnType("date");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LoginUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("TeacherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("LoginUID");

                    b.HasIndex("OrgId", "EmpId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("EduManAPI.TimeTable", b =>
                {
                    b.Property<Guid>("TTID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HourNo")
                        .HasColumnType("int");

                    b.Property<Guid>("StnSubMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeekNo")
                        .HasColumnType("int");

                    b.HasKey("TTID");

                    b.HasIndex("StnSubMapId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("EduManAPI.TimeTableSetting", b =>
                {
                    b.Property<Guid>("TTSID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("int");

                    b.HasKey("TTSID");

                    b.HasIndex("StnId")
                        .IsUnique();

                    b.ToTable("TimeTableSettings");
                });

            modelBuilder.Entity("EduManAPI.UserInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emailid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("EduManAPI.UserOrgMap", b =>
                {
                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MapId");

                    b.HasIndex("OrgId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "OrgId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserOrgMaps");
                });

            modelBuilder.Entity("EduManAPI.Vendor", b =>
                {
                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId");

                    b.HasIndex("OrgId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("EduManAPI.AppLinkDistribution", b =>
                {
                    b.HasOne("EduManAPI.StuStdAcdYearMap", "MapObj")
                        .WithMany()
                        .HasForeignKey("StuMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapObj");
                });

            modelBuilder.Entity("EduManAPI.Assignment", b =>
                {
                    b.HasOne("EduManAPI.StdSubMap", "StdSub")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StdSub");
                });

            modelBuilder.Entity("EduManAPI.AssignmentSubmission", b =>
                {
                    b.HasOne("EduManAPI.Assignment", "Assmt")
                        .WithMany()
                        .HasForeignKey("AssnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StuStdAcdYearMap", "StudentMap")
                        .WithMany()
                        .HasForeignKey("StuMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assmt");

                    b.Navigation("StudentMap");
                });

            modelBuilder.Entity("EduManAPI.BankDeatail", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.Cashier", b =>
                {
                    b.HasOne("EduManAPI.UserInfo", "UInfo")
                        .WithMany()
                        .HasForeignKey("LoginUID");

                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("UInfo");
                });

            modelBuilder.Entity("EduManAPI.Chalan", b =>
                {
                    b.HasOne("EduManAPI.StuStdAcdYearMap", "SSMap")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SSMap");
                });

            modelBuilder.Entity("EduManAPI.ChalanLineInfo", b =>
                {
                    b.HasOne("EduManAPI.Chalan", "Chln")
                        .WithMany()
                        .HasForeignKey("ChlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.FeeMaster", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chln");

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("EduManAPI.ChapterwiseExamChapter", b =>
                {
                    b.HasOne("EduManAPI.SubChapeter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.ChapterwiseExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("EduManAPI.CoCurricularMark", b =>
                {
                    b.HasOne("EduManAPI.Exam", "Exm")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StuStdAcdYearMap", "SSAMap")
                        .WithMany()
                        .HasForeignKey("StuMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exm");

                    b.Navigation("SSAMap");
                });

            modelBuilder.Entity("EduManAPI.DigitalContent", b =>
                {
                    b.HasOne("EduManAPI.SubChapeter", "Chap")
                        .WithMany()
                        .HasForeignKey("ChapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chap");
                });

            modelBuilder.Entity("EduManAPI.Exam", b =>
                {
                    b.HasOne("EduManAPI.ExamType", "EType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EType");
                });

            modelBuilder.Entity("EduManAPI.ExamProgressReport", b =>
                {
                    b.HasOne("EduManAPI.ExamProgressReportHead", "PRHead")
                        .WithMany()
                        .HasForeignKey("PRHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.ExamSchedule", "ExmSchedule")
                        .WithMany()
                        .HasForeignKey("SchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StuStdAcdYearMap", "SSAMap")
                        .WithMany()
                        .HasForeignKey("StuMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExmSchedule");

                    b.Navigation("PRHead");

                    b.Navigation("SSAMap");
                });

            modelBuilder.Entity("EduManAPI.ExamProgressReportHead", b =>
                {
                    b.HasOne("EduManAPI.Exam", "Exm")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exm");
                });

            modelBuilder.Entity("EduManAPI.ExamSchedule", b =>
                {
                    b.HasOne("EduManAPI.Exam", "CurExam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StdSubMap", "CurStnSubMap")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurExam");

                    b.Navigation("CurStnSubMap");
                });

            modelBuilder.Entity("EduManAPI.ExamType", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.ExpenseHead", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.FeeCollection", b =>
                {
                    b.HasOne("EduManAPI.Chalan", "Chln")
                        .WithMany()
                        .HasForeignKey("ChlnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StuStdAcdYearMap", "SSMap")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chln");

                    b.Navigation("SSMap");
                });

            modelBuilder.Entity("EduManAPI.FeeCollectionLineItem", b =>
                {
                    b.HasOne("EduManAPI.FeeCollection", "FC")
                        .WithMany()
                        .HasForeignKey("ColId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.FeeMaster", "FM")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FC");

                    b.Navigation("FM");
                });

            modelBuilder.Entity("EduManAPI.FeeConcession", b =>
                {
                    b.HasOne("EduManAPI.StuStdAcdYearMap", "SSMap")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SSMap");
                });

            modelBuilder.Entity("EduManAPI.FeeHeadMaster", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.FeeMaster", b =>
                {
                    b.HasOne("EduManAPI.AcdYear", "AcdYear")
                        .WithMany()
                        .HasForeignKey("AcdyearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StuStdAcdYearMap", "SSMap")
                        .WithMany()
                        .HasForeignKey("MapId");

                    b.HasOne("EduManAPI.Standard", "Stnd")
                        .WithMany()
                        .HasForeignKey("StnId");

                    b.Navigation("AcdYear");

                    b.Navigation("SSMap");

                    b.Navigation("Stnd");
                });

            modelBuilder.Entity("EduManAPI.GradeRange", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.HomeWork", b =>
                {
                    b.HasOne("EduManAPI.StdSubMap", "StdSub")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StdSub");
                });

            modelBuilder.Entity("EduManAPI.HomeWorkSubmission", b =>
                {
                    b.HasOne("EduManAPI.HomeWork", "HW")
                        .WithMany()
                        .HasForeignKey("HWId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StuStdAcdYearMap", "StudentMap")
                        .WithMany()
                        .HasForeignKey("StuMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HW");

                    b.Navigation("StudentMap");
                });

            modelBuilder.Entity("EduManAPI.NotificationRecp", b =>
                {
                    b.HasOne("EduManAPI.Notification", "Notf")
                        .WithMany()
                        .HasForeignKey("NID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notf");
                });

            modelBuilder.Entity("EduManAPI.OnLineSessionInfo", b =>
                {
                    b.HasOne("EduManAPI.OnlineSessionUrl", "SUrl")
                        .WithMany()
                        .HasForeignKey("OSessionUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StdSubMap", "SSMap")
                        .WithMany()
                        .HasForeignKey("SubMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SSMap");

                    b.Navigation("SUrl");
                });

            modelBuilder.Entity("EduManAPI.OnlineSessionAttendee", b =>
                {
                    b.HasOne("EduManAPI.StuStdAcdYearMap", "StuMap")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.OnLineSessionInfo", "OSInfo")
                        .WithMany()
                        .HasForeignKey("OSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OSInfo");

                    b.Navigation("StuMap");
                });

            modelBuilder.Entity("EduManAPI.OnlineSessionUrl", b =>
                {
                    b.HasOne("EduManAPI.Teacher", "Tchr")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tchr");
                });

            modelBuilder.Entity("EduManAPI.PayRoll", b =>
                {
                    b.HasOne("EduManAPI.Payhead", "PHead")
                        .WithMany()
                        .HasForeignKey("HID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PHead");
                });

            modelBuilder.Entity("EduManAPI.Payhead", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.SalaryDetail", b =>
                {
                    b.HasOne("EduManAPI.Salary", "Sal")
                        .WithMany()
                        .HasForeignKey("SalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sal");
                });

            modelBuilder.Entity("EduManAPI.SchoolSetting", b =>
                {
                    b.HasOne("EduManAPI.AcdYear", "AcdYr")
                        .WithMany()
                        .HasForeignKey("CurAcdYear");

                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcdYr");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.Standard", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.StdSubMap", b =>
                {
                    b.HasOne("EduManAPI.Standard", "Std")
                        .WithMany()
                        .HasForeignKey("StdId");

                    b.HasOne("EduManAPI.Subject", "Sub")
                        .WithMany()
                        .HasForeignKey("SubId");

                    b.Navigation("Std");

                    b.Navigation("Sub");
                });

            modelBuilder.Entity("EduManAPI.StuStdAcdYearMap", b =>
                {
                    b.HasOne("EduManAPI.AcdYear", "AcYear")
                        .WithMany()
                        .HasForeignKey("AcYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.Standard", "Stn")
                        .WithMany()
                        .HasForeignKey("StnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.StudentInfo", "Stu")
                        .WithMany()
                        .HasForeignKey("StuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcYear");

                    b.Navigation("Stn");

                    b.Navigation("Stu");
                });

            modelBuilder.Entity("EduManAPI.StudentInfo", b =>
                {
                    b.HasOne("EduManAPI.UserInfo", "UInfo")
                        .WithMany()
                        .HasForeignKey("LoginUID");

                    b.Navigation("UInfo");
                });

            modelBuilder.Entity("EduManAPI.SubChapeter", b =>
                {
                    b.HasOne("EduManAPI.StdSubMap", "StdSubMp")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StdSubMp");
                });

            modelBuilder.Entity("EduManAPI.Subject", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.Tax", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EduManAPI.Teacher", b =>
                {
                    b.HasOne("EduManAPI.UserInfo", "UInfo")
                        .WithMany()
                        .HasForeignKey("LoginUID");

                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");

                    b.Navigation("UInfo");
                });

            modelBuilder.Entity("EduManAPI.TimeTable", b =>
                {
                    b.HasOne("EduManAPI.StdSubMap", "SSMap")
                        .WithMany()
                        .HasForeignKey("StnSubMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.Teacher", "Teach")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SSMap");

                    b.Navigation("Teach");
                });

            modelBuilder.Entity("EduManAPI.TimeTableSetting", b =>
                {
                    b.HasOne("EduManAPI.Standard", "Std")
                        .WithMany()
                        .HasForeignKey("StnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Std");
                });

            modelBuilder.Entity("EduManAPI.UserOrgMap", b =>
                {
                    b.HasOne("EduManAPI.Organization", "OrgInfo")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.RoleMaster", "RoleInfo")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduManAPI.UserInfo", "Uinfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrgInfo");

                    b.Navigation("RoleInfo");

                    b.Navigation("Uinfo");
                });

            modelBuilder.Entity("EduManAPI.Vendor", b =>
                {
                    b.HasOne("EduManAPI.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Org");
                });
#pragma warning restore 612, 618
        }
    }
}
